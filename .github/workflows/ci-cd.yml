name: Docker CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  DOCKER_IMAGE: ghcr.io/hidinlitkit/unicicdtest
  APP_PORT: 60080
  CONTAINER_PORT: 8081

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

  test:
    needs: build-and-push   # теперь тест зависит от сборки
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres
        env:
          POSTGRES_USER: kubsu
          POSTGRES_PASSWORD: kubsu
          POSTGRES_DB: kubsu
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          
      - name: Install dependencies
        run: |
          cd .
          pip install .[test]
          pip install pytest httpx

      - name: Debug Python path
        run: |
          echo "PYTHONPATH: $PYTHONPATH"
          echo "Current directory: $(pwd)"
          ls -la

      - name: Run tests
        run: |
          cd .
          PYTHONPATH=$(pwd) pytest -v tests

  deploy:
    needs: test
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup SSH key
        shell: powershell
        env:
          SSH_KEY: ${{ secrets.SSH_PRIVATE }}
        run: |
          $keyPath = "$env:USERPROFILE\.ssh\kub_key"
          [System.IO.File]::WriteAllText($keyPath, $env:SSH_KEY)
        
          $acl = Get-Acl $keyPath
          $acl.SetAccessRuleProtection($true, $false)
          $acl.Access | ForEach-Object { $acl.RemoveAccessRule($_) }
          $rule = New-Object System.Security.AccessControl.FileSystemAccessRule(
            "$env:USERNAME", "FullControl", "Allow"
          )
          $acl.AddAccessRule($rule)
          Set-Acl $keyPath $acl
        
          icacls $keyPath

      - name: Deploy to server
        shell: powershell
        run: |
          $image = "${{ env.DOCKER_IMAGE }}"
          $appPort = "${{ env.APP_PORT }}"
          $containerPort = "${{ env.CONTAINER_PORT }}"
          $token = "${{ secrets.GITHUB_TOKEN }}"
    
          $commands = @"
          # Clean GHCR login
          podman login ghcr.io -u ${{ github.actor }} -p $token >/dev/null 2>&1 || {
          echo "Failed to login to GHCR"
          exit 1
          }

          # Pull the image with error handling
          if ! podman pull ${image}:latest; then
            echo "Failed to pull container image"
            exit 1
          fi

          # Clean up existing container
          podman stop app 2>/dev/null && echo "Stopped existing container" || echo "No running container to stop"
          podman rm app 2>/dev/null && echo "Removed existing container" || echo "No container to remove"

          # Run new container (choose either host or port mapping, not both)
          container_id=$(podman run -d \
            --name app \
            -p ${appPort}:${containerPort} \
            ${image}:latest) && \
          echo "Container started successfully: $container_id" || {
          echo "Failed to start container"
          exit 1
          }

          # Verify container status
          podman ps -f name=app --format '{{.ID}} {{.Status}} {{.Ports}}'
          "@
    

          
          ssh -v -i "$env:USERPROFILE\.ssh\kub_key" -o StrictHostKeyChecking=no -p 58529 mayer@kubsu.tyvik.ru $commands